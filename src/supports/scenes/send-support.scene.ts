import { Ctx, On, Scene, SceneEnter } from 'nestjs-telegraf'
import { NarrowedContext } from 'telegraf'
import { SceneContext } from 'telegraf/typings/scenes'
import { MountMap } from 'telegraf/typings/telegram-types'

import { SceneNameEnum } from '../../enums/scene-name.enum'
import { SupportsService } from '../supports.service'

@Scene(SceneNameEnum.SEND_SUPPORT)
export class SendSupportScene {
    constructor(private readonly _supportsService: SupportsService) {}

    @SceneEnter()
    async onEnter(@Ctx() ctx: SceneContext): Promise<void> {
        await ctx.reply(
            '–û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ —Ç—ã —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å –ø—Ä–æ–±–ª–µ–º–æ–πüòí\n–û–ø–∏—à–∏ –µ–µ –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –µ–µ —Ä–µ—à–∏—Ç—å',
        )
    }

    @On('text')
    async onText(
        @Ctx() ctx: NarrowedContext<SceneContext, MountMap['text']>,
    ): Promise<void> {
        if (ctx.chat?.id) {
            const support = await this._supportsService.createSupport({
                chat_id: ctx.chat.id,
                text: ctx.message.text,
            })
            await ctx.reply(
                `–ò–Ω–¥–µ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è: ${support.id}\n\n–°–ø–∞—Å–∏–±–æ! –¢–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–æ–∏–º —Å–æ–∑–¥–∞—Ç–µ–ª—è–º`,
            )
        }
        await ctx.scene.leave()
    }
}
